{% extends 'base.html.twig' %}

{% block body %}

	{# Formulaire de création d'un service #}
	<h1>Offer a new service</h1>
	<h2>Please fill the following information about your service.</h2>
	
	{{ form_start (form, {
					'attr': {'id': 'form_service'} ,
					'action': path('create_service')			
					}
		)
	}}
	{{ form_row (form.name) }}
	{{ form_row (form.description) }}
	{{ form_row (form.categorie) }}

	{# Notation pour incruster un CollectionType pour les pictures #}
	<ul class="pictures row"
		data-index="{{ form.pictures|length > 0 ? form.pictures|last.vars.name + 1 : 0 }}"
		data-prototype="{{ form_widget(form.pictures.vars.prototype, {'entry_options': {'attr': {'class': 'col-12 col-sm-6'}}})|e('html_attr') }}"
	></ul>

	<button type="button" class="add_item_link btn btn-secondary mb-3" data-collection-holder-class="pictures">Add pictures</button>
	
	{# Dropdown list avec les adresses de l'host #}
	{{ form_row (form.address) }}
	
	<div id="addAddress">Add a new address</div>

	{# Notation pour incruster un CollectionType pour les disponibilites #}
	<ul class="disponibilites row"
		data-index="{{ form.disponibilites|length > 0 ? form.disponibilites|last.vars.name + 1 : 0 }}"
		data-prototype="{{ form_widget(form.disponibilites.vars.prototype, {'entry_options': {'attr': {'class': 'col-12 col-sm-6'}}})|e('html_attr') }}"
	></ul>

	<button type="button" class="add_item_link btn btn-secondary mb-3" data-collection-holder-class="disponibilites">Add disponibilities</button>
	{{ form_end (form, {render_rest:false}) }}


	
	{# Second formulaire caché pour rajouter une adresse en plus #}
	{{ form_start (form_address, {'attr': {'id': 'form_address'}} ) }} 
	{{ form_widget (form_address) }}
		<button id="sendAddress" class="btn btn-secondary mb-3" data-route="{{ path ("add_address") }}">Add the new address</button>
	{{ form_end (form_address) }}
	
	<input id="submit_service" type="submit" value="Post my service" class="btn btn-primary">

{% endblock %}

{% block javascripts %}

<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>

	// https://uxsolutions.github.io/bootstrap-datepicker/?markup=range&format=&weekStart=&startDate=&endDate=&startView=0&minViewMode=0&maxViewMode=4&todayBtn=false&clearBtn=false&language=en&orientation=auto&multidate=&multidateSeparator=&keyboardNavigation=on&forceParse=on#sandbox
	// https://symfony.com/doc/current/reference/forms/types/date.html 
	{# $(document).ready(function() {
        // you may need to change this code if you are not using Bootstrap Datepicker
        $('.js-datepicker').datepicker({
            format: 'yyyy-mm-dd'
        });
    }); #}


	let addAddress = document.getElementById("addAddress"); 
	let sendAddress = document.getElementById("sendAddress");
	let formAddress = document.getElementById("form_address");
	
	{# Affiche le formulaire d'ajout d'adresse ("formAddress") lors du click de "addAdress" #}
	addAddress.addEventListener("click", function (event) {
		event.preventDefault();
		console.log(document.getElementById("form_address"));
		formAddress.style.display = "block"; 
	});

	{# Gestion AJAX de l'ajout d'une nouvelle adresse / Mise à jour du select avec l'adresse ajoutée #}
	sendAddress.addEventListener("click", function (event) {
			event.preventDefault();
			console.log (event.target);
			// faire l'appel ajax ici 
			axios({
				url: event.target.dataset.route,
				method: 'POST',
				headers: { 'Content-Type': 'multipart/form-data' },
				data: new FormData(document.getElementById("form_address"))
			})
			.then(function (response){
				console.log(response.data);
				address = JSON.parse(response.data); 
				console.log(address);
				console.log(address.id)
				
				const newOption = document.createElement('option');
				const optionText = document.createTextNode(`${address.number} ${address.street}, boite ${address.box}, ${address.city}, ${address.state}, ${address.country}`);
				newOption.appendChild(optionText);
				newOption.setAttribute(`value`, `${address.id}`);
				newOption.setAttribute('selected', 'selected');

				const select = document.querySelector('select#service_address');
				select.appendChild(newOption);
			});
			formAddress.reset();
			formAddress.style.display = "none"; 
	});

	{# Submit du formulaire de service lors du click (car l'input est en dehors du formulaire de service) #}
	submit_service.addEventListener("click", function (event) {
		form_service.submit();
	});	

	{# code pour l'ajout d'une disponibilité qui est un CollectionType #}
	const addFormToCollection = (e) => {
		const collectionHolder = document.querySelector('.' + e.currentTarget.dataset.collectionHolderClass);

		const item = document.createElement('li');

		item.innerHTML = collectionHolder
			.dataset
			.prototype
			.replace(
			/__name__/g,
			collectionHolder.dataset.index
			);

		collectionHolder.appendChild(item);

		collectionHolder.dataset.index++;
	};

	{# code pour l'ajout d'une disponibilité qui est un CollectionType #}
	document.querySelectorAll('.add_item_link')
		.forEach(btn => {
			btn.addEventListener("click", addFormToCollection)
		});
</script>

{% endblock %}
